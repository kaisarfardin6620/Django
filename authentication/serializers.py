import re
from rest_framework import serializers
from django.contrib.auth.models import User
from .models import UserProfile, OTP, EmailVerificationToken, EmailChangeToken, UserActivityLog, PasswordHistory # Ensure all models are imported
from django.contrib.auth.tokens import PasswordResetTokenGenerator
from django.utils.encoding import force_str, DjangoUnicodeDecodeError # Import DjangoUnicodeDecodeError
from django.utils.http import urlsafe_base64_decode # Import urlsafe_base64_decode
from django.utils import timezone # Import timezone for custom validation
import requests # For simulating external API call for breached passwords
import hashlib # For hashing passwords for breached password check

# --- Custom Password Validators ---

# Custom password validation function (existing)
def validate_strong_password(value):
    if len(value) < 8:
        raise serializers.ValidationError("Password must be at least 8 characters long.")
    if not re.search(r'[A-Z]', value):
        raise serializers.ValidationError("Password must contain at least one uppercase letter.")
    if not re.search(r'[a-z]', value):
        raise serializers.ValidationError("Password must contain at least one lowercase letter.")
    if not re.search(r'[0-9]', value):
        raise serializers.ValidationError("Password must contain at least one digit.")
    if not re.search(r'[!@#$%^&*(),.?":{}|<>]', value):
        raise serializers.ValidationError("Password must contain at least one special character.")
    return value

# NEW: Password History Validation
def validate_password_history(user, new_password, history_limit=5):
    """
    Checks if the new password has been used in the last `history_limit` passwords.
    """
    if user.pk: # Only check history for existing users
        from django.contrib.auth.hashers import make_password, check_password
        # Check against raw new_password first for common cases, then against hashed history
        # The PasswordHistory stores the hashed version as generated by user.set_password or make_password
        
        recent_passwords = PasswordHistory.objects.filter(user=user).order_by('-created_at')[:history_limit]
        
        for old_entry in recent_passwords:
            # Check if the new password matches any of the old hashed passwords
            if check_password(new_password, old_entry.hashed_password):
                 raise serializers.ValidationError("You cannot reuse a recently used password.")
    return new_password

# NEW: Breached Password Detection (Simulated)
def validate_breached_password(password):
    """
    Simulates checking if a password has been compromised in known data breaches.
    In a real app, this would query an external service like Have I Been Pwned.
    """
    # For demonstration, we'll use a very simple check or mock an API call.
    # A real implementation would involve:
    # 1. Hashing the password (SHA1)
    # 2. Taking the first 5 characters of the hash
    # 3. Sending this prefix to the HIBP API
    # 4. Checking if the full hash suffix is returned

    # SIMULATED BREACHED PASSWORDS (replace with actual API call)
    # For testing, let's say "password123" is a known breached password.
    if password.lower() == "password123": # Case-insensitive check for demo
        raise serializers.ValidationError("This password has been found in a data breach. Please choose a different one.")
    
    # Example of how you might integrate with HIBP (conceptual, not runnable without API setup)
    # sha1_password = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
    # prefix = sha1_password[:5]
    # suffix = sha1_password[5:]
    # hibp_url = f"https://api.pwnedpasswords.com/range/{prefix}"
    # try:
    #     response = requests.get(hibp_url, headers={'Add-Padding': 'true'})
    #     response.raise_for_status() # Raise HTTPError for bad responses (4xx or 5xx)
    #     if suffix in response.text:
    #         raise serializers.ValidationError("This password has been found in a data breach. Please choose a different one.")
    # except requests.exceptions.RequestException as e:
    #     # Log the error, but don't prevent user from signing up if API is down
    #     print(f"HIBP API error: {e}")
    #     # Optionally, you might raise a softer warning or log it.
    
    return password

# --- Serializers ---

class UserSignupSerializer(serializers.ModelSerializer):
    password2 = serializers.CharField(style={'input_type': 'password'}, write_only=True)

    class Meta:
        model = User
        fields = ['username', 'email', 'password', 'password2']
        extra_kwargs = {
            'password': {'write_only': True, 'validators': [validate_strong_password, validate_breached_password]} # Apply new validation
        }

    def validate(self, attrs):
        if attrs['password'] != attrs['password2']:
            raise serializers.ValidationError({"password": "Password fields didn't match."})
        if User.objects.filter(email=attrs['email']).exists():
            raise serializers.ValidationError({"email": "This email is already registered."})
        return attrs

    def create(self, validated_data):
        user = User.objects.create_user(
            username=validated_data['username'],
            email=validated_data['email'],
            password=validated_data['password'],
            is_active=False # User is inactive until email link is verified
        )
        # IMPORTANT: UserProfile is created by a post_save signal in models.py
        
        # NEW: Save password to history on signup
        # user.password stores the hashed version after create_user
        PasswordHistory.objects.create(user=user, hashed_password=user.password) 
        return user

class UserLoginSerializer(serializers.Serializer):
    username = serializers.CharField(required=False)
    email = serializers.EmailField(required=False)
    password = serializers.CharField(write_only=True)

    def validate(self, data):
        username = data.get('username')
        email = data.get('email')
        password = data.get('password')

        if not (username or email):
            raise serializers.ValidationError("Either username or email is required.")
        if not password:
            raise serializers.ValidationError("Password is required.")
        
        # If both are provided, prioritize username
        if username:
            try:
                user = User.objects.get(username=username)
            except User.DoesNotExist:
                raise serializers.ValidationError("Invalid credentials.")
        else: # Use email if username not provided
            try:
                user = User.objects.get(email=email)
            except User.DoesNotExist:
                raise serializers.ValidationError("Invalid credentials.")
        
        # Store the user object in validated_data for easy access in the view
        data['user'] = user
        return data


class UserProfileSerializer(serializers.ModelSerializer):
    profile = serializers.SerializerMethodField()

    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'first_name', 'last_name', 'date_joined', 'profile']

    def get_profile(self, user):
        try:
            profile = user.userprofile
            return UserProfileNestedSerializer(profile).data
        except UserProfile.DoesNotExist:
            return None

class UserProfileNestedSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserProfile
        fields = ['id', 'date_of_birth', 'profile_picture', 'age', 'gender', 'phone_number', 'address', 'updated_at', 'is_2fa_enabled', 'bio'] # Added bio
        read_only_fields = ['id', 'user', 'age'] # age is a property, not a direct field

class PasswordChangeSerializer(serializers.Serializer):
    old_password = serializers.CharField(required=True)
    new_password = serializers.CharField(required=True, validators=[validate_strong_password, validate_breached_password]) # Apply new validation
    confirm_password = serializers.CharField(required=True)

    def validate(self, data):
        if data['new_password'] != data['confirm_password']:
            raise serializers.ValidationError({"confirm_password": "New passwords must match."})
        
        user = self.context['request'].user # Get the current user from context
        # NEW: Validate against password history
        validate_password_history(user, data['new_password']) # Pass the user object
        
        return data

    def save(self, **kwargs):
        user = self.context['request'].user
        new_password = self.validated_data.get('new_password')
        user.set_password(new_password)
        user.save()
        # NEW: Save new password to history
        PasswordHistory.objects.create(user=user, hashed_password=user.password)
        return user

class PasswordResetRequestSerializer(serializers.Serializer):
    username = serializers.CharField(required=False)
    email = serializers.EmailField(required=False)

    def validate(self, data):
        if not data.get('username') and not data.get('email'):
            raise serializers.ValidationError("Either username or email is required.")
        return data

class PasswordResetConfirmSerializer(serializers.Serializer):
    uid = serializers.CharField(required=True)
    token = serializers.CharField(required=True)
    new_password = serializers.CharField(required=True, validators=[validate_strong_password, validate_breached_password]) # Apply new validation
    confirm_password = serializers.CharField(required=True)

    def validate(self, data):
        if data['new_password'] != data['confirm_password']:
            raise serializers.ValidationError({"confirm_password": "New passwords must match."})
        
        try:
            # Decode the uid back to the user's primary key
            uid_decoded = force_str(urlsafe_base64_decode(data.get('uid')))
            user = User.objects.get(pk=uid_decoded)
            
            token_generator = PasswordResetTokenGenerator()
            if not token_generator.check_token(user, data.get('token')):
                raise serializers.ValidationError("Invalid or expired password reset token.")
            
            # NEW: Validate against password history for password reset
            validate_password_history(user, data['new_password']) # Pass the user object

            self.user = user # Store user for use in save method
        except (User.DoesNotExist, TypeError, ValueError, OverflowError, DjangoUnicodeDecodeError): # Added DjangoUnicodeDecodeError
            raise serializers.ValidationError("Invalid or expired password reset token.")
        
        return data

    def save(self, **kwargs):
        user = self.user
        user.set_password(self.validated_data['new_password'])
        user.save()
        # NEW: Save new password to history
        PasswordHistory.objects.create(user=user, hashed_password=user.password)
        return user


class OTPVerificationSerializer(serializers.Serializer):
    email = serializers.EmailField(required=True)
    otp_code = serializers.CharField(required=True, max_length=6)
    
class AccountDeactivateSerializer(serializers.Serializer):
    password = serializers.CharField(required=True)

class AccountDeleteSerializer(serializers.Serializer):
    password = serializers.CharField(required=True)

class EmailVerificationSerializer(serializers.Serializer):
    token = serializers.UUIDField(required=True)

    def validate(self, data):
        token_value = data.get('token')
        if not token_value:
            raise serializers.ValidationError({"token": "Token is required."})
        
        try:
            token_obj = EmailVerificationToken.objects.get(token=token_value)
            if not token_obj.is_valid():
                raise serializers.ValidationError({"token": "Verification token has expired."})
            data['token_obj'] = token_obj # Store token object in validated_data
            return data
        except EmailVerificationToken.DoesNotExist:
            raise serializers.ValidationError({"token": "Invalid verification token."})

# New serializer for Profile Picture Upload
class ProfilePictureUploadSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserProfile
        fields = ['profile_picture']
        read_only_fields = ['id', 'user'] # Ensure only profile_picture can be updated

# New serializer for Email Change Request
class EmailChangeRequestSerializer(serializers.Serializer):
    new_email = serializers.EmailField(required=True)

    def validate_new_email(self, value):
        if User.objects.filter(email=value).exists():
            raise serializers.ValidationError("This email address is already in use.")
        return value

# New serializer for Email Change Confirmation
class EmailChangeConfirmSerializer(serializers.Serializer):
    token = serializers.UUIDField(required=True)
    # The new_email is implicitly handled by the token, but can be added for clarity if needed
    # new_email = serializers.EmailField(required=True) 

    def validate(self, data):
        try:
            token_obj = EmailChangeToken.objects.get(token=data['token'])
        except EmailChangeToken.DoesNotExist:
            raise serializers.ValidationError("Invalid or expired email change token.")

        if not token_obj.is_valid():
            raise serializers.ValidationError("Invalid or expired email change token.")
        
        if token_obj.user.email == token_obj.new_email:
            raise serializers.ValidationError("Email is already set to the new email address.")

        self.token_obj = token_obj # Store token_obj for use in save method
        return data

    def save(self, **kwargs):
        token_obj = self.token_obj
        user = token_obj.user
        user.email = token_obj.new_email
        user.save()
        token_obj.delete() # Invalidate token after use
        return user
